[{"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\index.js":"1","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\App.js":"2","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Login.js":"3","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\LoginRegister.js":"4","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Register.js":"5","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Navbar.js":"6","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\HomePage.js":"7","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\UserService.js":"8","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\UserInfo.js":"9","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\UserInfoForm.js":"10","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\TeamInfo.js":"11","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\TeamService.js":"12","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\TeamCard.js":"13","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\TeamInfoForm.js":"14","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\ProgressBar.js":"15","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\CreateTeam.js":"16","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\AdminPage.js":"17","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\LeagueService.js":"18","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\LeagueForm.js":"19","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\CreateLeague.js":"20","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\ViewLeague.js":"21","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\Matches.js":"22","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\LeagueDisplay.js":"23","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\MatchService.js":"24"},{"size":226,"mtime":1615105618088,"results":"25","hashOfConfig":"26"},{"size":2359,"mtime":1617552982824,"results":"27","hashOfConfig":"26"},{"size":3711,"mtime":1617570053627,"results":"28","hashOfConfig":"26"},{"size":3711,"mtime":1617575911803,"results":"29","hashOfConfig":"26"},{"size":7846,"mtime":1617466906435,"results":"30","hashOfConfig":"26"},{"size":4117,"mtime":1617570348820,"results":"31","hashOfConfig":"26"},{"size":2664,"mtime":1617575344185,"results":"32","hashOfConfig":"26"},{"size":2806,"mtime":1617587694047,"results":"33","hashOfConfig":"26"},{"size":4323,"mtime":1617371613227,"results":"34","hashOfConfig":"26"},{"size":8965,"mtime":1617575956186,"results":"35","hashOfConfig":"26"},{"size":8426,"mtime":1617579275803,"results":"36","hashOfConfig":"26"},{"size":1415,"mtime":1617587682121,"results":"37","hashOfConfig":"26"},{"size":1228,"mtime":1615623832700,"results":"38","hashOfConfig":"26"},{"size":15770,"mtime":1617596246746,"results":"39","hashOfConfig":"26"},{"size":1102,"mtime":1617570430500,"results":"40","hashOfConfig":"26"},{"size":7967,"mtime":1617575186592,"results":"41","hashOfConfig":"26"},{"size":17663,"mtime":1617573159297,"results":"42","hashOfConfig":"26"},{"size":1714,"mtime":1617587664168,"results":"43","hashOfConfig":"26"},{"size":5105,"mtime":1617570029040,"results":"44","hashOfConfig":"26"},{"size":514,"mtime":1617572333252,"results":"45","hashOfConfig":"26"},{"size":4855,"mtime":1617580949522,"results":"46","hashOfConfig":"26"},{"size":12309,"mtime":1617578397187,"results":"47","hashOfConfig":"26"},{"size":11106,"mtime":1617576018188,"results":"48","hashOfConfig":"26"},{"size":1430,"mtime":1617587674086,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ndm76z",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\index.js",[],["108","109"],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\App.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Login.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\LoginRegister.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Register.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\Navbar.js",["110"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This file is the navbar that is used in the app\r\n */\r\n\r\n//necessary imports for the project\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Cookies from 'universal-cookie';\r\nimport userService from \"./../service/UserService\";\r\n\r\n//Styles for the navbar\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\n/**\r\n * This function returns the Navbar to the page. \r\n * @returns - HTML Page\r\n */\r\nexport default function ButtonAppBar() {\r\n\r\n  //Initialize variables that will be used in this page\r\n  const classes = useStyles();\r\n  const [isLoading, setLoading] = useState();\r\n  const [user, setUser] = useState();\r\n\r\n  //Initialize the cookies for the page\r\n  const cookies = new Cookies();\r\n  const _id = cookies.get('Id');\r\n\r\n  /**\r\n     * fetchData() - Async call that will grab all the necessary data for this page\r\n     */\r\n  const fetchData = async () => {\r\n    //Grab the ID from the session and convert it to json\r\n    let json = JSON.stringify({\r\n      \"_id\": _id,\r\n    });\r\n\r\n    try {\r\n      //Page is loading while grabbing the data\r\n      setLoading(true)\r\n      //use the json data in the user service to get the user by id\r\n      //store it in the user global variable\r\n      const user = await userService.getUser(json)\r\n      setUser(user)\r\n    } catch (e) {\r\n      //If there are errors log them\r\n      console.log(e)\r\n    } finally {\r\n      //set loading to false so the page is rendered\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  //Use effect will render the data\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  //Create a navabar variable to store the different navbars based on the users session\r\n  let navbar;\r\n\r\n  //if the navbar is in login register return the LoginRegister Navbar\r\n  if (window.location.pathname === \"/LoginRegister\") {\r\n    navbar =\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Genesis Esports\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n  //If the user id is the Adming user id return the navbar with the admin permissions\r\n  } else if (user?._id === \"6068a18c4ad5801e4d72ee21\") {\r\n    navbar =\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          <Button href=\"/HomePage\" color=\"inherit\">Genesis Esports</Button>\r\n          <Button href=\"/TeamInfo\" color=\"inherit\">Teams</Button>\r\n          <Button href=\"/UserInfo\" color=\"inherit\">My Info</Button>\r\n          <Button href=\"/Matches\" color=\"inherit\">Matches</Button>\r\n        </Typography>\r\n        <Button href=\"/AdminPage\" color=\"inherit\">Admin</Button>\r\n        <Button href=\"/LoginRegister\" color=\"inherit\">Logout</Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  //Else return normal user navbar\r\n  } else {\r\n    navbar =\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Button href=\"/HomePage\" color=\"inherit\">Genesis Esports</Button>\r\n            <Button href=\"/TeamInfo\" color=\"inherit\">Teams</Button>\r\n            <Button href=\"/UserInfo\" color=\"inherit\">My Info</Button>\r\n            <Button href=\"/Matches\" color=\"inherit\">Matches</Button>\r\n          </Typography>\r\n          <Button href=\"/LoginRegister\" color=\"inherit\">Logout</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n  }\r\n\r\n  \r\n\r\n  //Return the HTML to the app\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        <div>\r\n          Loading Information...\r\n        </div>\r\n      ) : (\r\n        <div className={classes.root}>\r\n          {navbar}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\HomePage.js",["111"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This is the homepage that will display a welcome message.\r\n */\r\n\r\n//Necessary imports for the page\r\nimport React, { useState, useEffect } from 'react';\r\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Cookies from 'universal-cookie';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LeagueDisplay from './LeagueDisplay';\r\nimport UserService from '../service/UserService';\r\n\r\n//Styles needed for the page\r\nconst useStyles = makeStyles({\r\n  root: {\r\n      minWidth: 275,\r\n      align: 'center',\r\n  },\r\n  card: {\r\n      minWidth: 275,\r\n      align: 'center',\r\n      marginTop: 50\r\n  },\r\n  cardContent: {\r\n      minWidth: 275,\r\n      align: 'center',\r\n      marginTop: 50,\r\n      backgroundColor: \"#3f50b5\"\r\n  },\r\n  bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n      fontSize: 14,\r\n  },\r\n  pos: {\r\n      marginBottom: 12,\r\n      marginTop: 10,\r\n      color: \"#FFFFFF\"\r\n  },\r\n  button: {\r\n      size: \"large\",\r\n      float: 'right',\r\n      padding: 20,\r\n      marginRight: 100,\r\n      marginTop: 500,\r\n      marginBottom: 100,\r\n      variant: \"contained\",\r\n      color: \"primary\",\r\n      justifycontent: 'center'\r\n  },\r\n  header: {\r\n      marginTop: 50\r\n  }\r\n});\r\n\r\n\r\n//set up themes and session\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\nconst cookies = new Cookies();\r\n\r\n\r\n\r\n/**\r\n * Main page that will display the theme of the website\r\n * @returns HTLM Page\r\n */\r\nexport default function ResponsiveFontSizes() {\r\n\r\n  //declear the variables used in the page\r\n  const classes = useStyles();\r\n  const [user, setUser] = useState();\r\n\r\n  /**\r\n     * FetchData will grab the user from the database\r\n     */\r\n  const fetchData = async () => {\r\n    //convert the ID from the session to JSON\r\n    let json = JSON.stringify({\r\n      \"_id\" : cookies.get(\"Id\")\r\n    })\r\n\r\n    //grab the user from the database and store it in tempuser\r\n    const tempUser = await UserService.getUser(json);\r\n    //set the user to the global variable\r\n    setUser(tempUser)\r\n  }\r\n\r\n  //Method that will render the information for the page\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n        Hello, {user?.username} thank you for joining Genesis Esports!\r\n        </Typography>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\UserService.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\UserInfo.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\UserInfoForm.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\TeamInfo.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\TeamService.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\TeamCard.js",[],["112","113"],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\TeamInfoForm.js",["114","115","116","117"],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\ProgressBar.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\CreateTeam.js",["118"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This Page will be used to Create a team as well as contain logic for the teams\r\n */\r\n\r\n//Import all the necessary components for the page \r\nimport React, { useState, useEffect } from \"react\";\r\nimport userService from \"./../service/UserService\";\r\nimport Cookies from 'universal-cookie';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button } from '@material-ui/core';\r\nimport teamService from \"./../service/TeamService\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\n\r\n//Styles needed for the page\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n/**\r\n * The main function that will export the rendered HTML at the bottom\r\n * @param {} props - Variables that were passed to the page\r\n * @returns - HTML Page\r\n */\r\nexport default function Component(props) {\r\n\r\n    //Define all the constants that will be used throghout the page\r\n    const [user, setUser] = useState();\r\n    const [isLoading, setLoading] = useState();\r\n    const cookies = new Cookies();\r\n    const _id = cookies.get('Id');\r\n    const classes = useStyles();\r\n    const [teamName, setTeamName] = useState('');\r\n    const [clubTag, setClubTag] = useState('');\r\n    let history = useHistory();\r\n\r\n    //On change variables so that it will render when it is detected\r\n    const onChangeTeamName = (event) => {\r\n        setTeamName(event.target.value);\r\n    }\r\n\r\n    const onChangeClubTag = (event) => {\r\n        setClubTag(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * FetchData will grab the user from the database\r\n     */\r\n    const fetchData = async () => {\r\n        //Conver the user ID to json from the session\r\n        let json = JSON.stringify({\r\n            \"_id\": _id,\r\n        });\r\n        try {\r\n            //set loading to true so that the information is rendered\r\n            setLoading(true)\r\n            //grab the user from the database and store it to the user constant\r\n            const user = await userService.getUser(json)\r\n            //set the user to the global constant\r\n            setUser(user)\r\n        } catch (e) {\r\n            //if there are any errors log them\r\n            console.log(e)\r\n        } finally {\r\n            //set loading to false so that the page is rendered\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will create a team and will set \r\n     * the current user as the team owner by setting the team_id and owner id\r\n     * @param {*} event \r\n     */\r\n    const handleSubmit = async (event) => {\r\n        //prevent rendering \r\n        event.preventDefault();\r\n\r\n        //Convert the team information to json \r\n        let json = JSON.stringify({\r\n            \"clubTag\": clubTag,\r\n            \"ownerID\": _id,\r\n            \"teamLosses\": 0,\r\n            \"teamWins\": 0,\r\n            \"teamName\": teamName\r\n        });\r\n\r\n        //use the service to add the team to the database\r\n        let status = await teamService.createTeam(json);\r\n\r\n        //edit the user information so that the team ID is assigned\r\n        //convert the information to JSON\r\n        let jsonUser = JSON.stringify({\r\n            \"_id\": _id,\r\n            \"team_id\": status._id,\r\n            \"firstName\": user.firstName,\r\n            \"lastName\": user.lastName,\r\n            \"email\": user.email,\r\n            \"phoneNumber\": user.phoneNumber,\r\n            \"game\": user.game,\r\n            \"username\": user.username,\r\n            \"password\": user.password\r\n        });\r\n\r\n        //save the information to the database\r\n        let statusUser = await userService.editUser(jsonUser);\r\n\r\n\r\n        //if successful push to TeamInformation page\r\n        if (statusUser !== \"\") {\r\n            history.push(\"/TeamInfo\")\r\n        } else {\r\n            //Else Display error\r\n            alert(\"Failed to Create Team\")\r\n        }\r\n    }\r\n\r\n    //Method that will render the information for the page\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                <div>\r\n                    Loading Information...\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <Typography align=\"center\" variant=\"h4\" style={{ marginTop: 40 }}>\r\n                        Create your team {user?.firstName} !\r\n                        <br></br>\r\n                    </Typography>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <ValidatorForm onSubmit={handleSubmit} onError={errors => console.log(errors)}>\r\n                                {/* TeamName Field */}\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"teamName\"\r\n                                    label=\"Team Name\"\r\n                                    name=\"teamName\"\r\n                                    autoComplete=\"teamName\"\r\n                                    validators={['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{4,32}$']}\r\n                                    errorMessages={['This field is required', 'Can only contain letters and numbers', 'Must be 4 to 32 characters']}\r\n                                    onChange={onChangeTeamName}\r\n                                    value={teamName}\r\n                                    autoFocus\r\n                                />\r\n                                {/* ClubTag Field */}\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"clubTag\"\r\n                                    label=\"Club Tag\"\r\n                                    name=\"clubTag\"\r\n                                    autoComplete=\"clubTag\"\r\n                                    validators={['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{3}$']}\r\n                                    errorMessages={['This field is required', 'Can only contain letters and numbers', 'Must be 3 characters']}\r\n                                    onChange={onChangeClubTag}\r\n                                    value={clubTag}\r\n                                    autoFocus\r\n                                />\r\n                                <TextField/>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Create Team\r\n                                </Button>\r\n                            </ValidatorForm>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\AdminPage.js",["119","120","121","122","123","124"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This Page is the AdminView and will hold adming side functionality\r\n */\r\n\r\n//Import all the necessary components for the page \r\nimport React, { useState, useEffect } from \"react\";\r\nimport leagueService from './../service/LeagueService';\r\nimport matchService from './../service/MatchService';\r\nimport teamService from \"./../service/TeamService\";\r\nimport LeagueForm from './../components/LeagueForm';\r\nimport ViewLeague from './ViewLeague';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n//Devine the CSS styles that are going to be used and store in use styles\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n    },\r\n    card: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50\r\n    },\r\n    cardContent: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50,\r\n        backgroundColor: \"#3f50b5\"\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n        marginTop: 10,\r\n        color: \"#FFFFFF\"\r\n    },\r\n    button: {\r\n        size: \"large\",\r\n        float: 'right',\r\n        padding: 20,\r\n        marginRight: 100,\r\n        marginTop: 500,\r\n        marginBottom: 100,\r\n        variant: \"contained\",\r\n        color: \"primary\",\r\n        justifycontent: 'center'\r\n    },\r\n    header: {\r\n        marginTop: 50\r\n    }\r\n});\r\n\r\n/**\r\n * The class function will take in the props necessary and will perform logic \r\n * to the backend as described in the function.\r\n * @param {*} props - Will recieve User, League and Team props\r\n * @returns HTML Page\r\n */\r\nexport default function Component(props) {\r\n\r\n    //Decleare all the constants necessary for the page\r\n    const [leagues, setLeagues] = useState([]);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [teams, setTeams] = useState([]);\r\n    const [viewLeague, setViewLeague] = useState(false);\r\n    const [matches, setMatches] = useState([]);\r\n\r\n    /**\r\n     * FetchData will grab all the leagues, teams and matches from the database\r\n     * by usinge the respective services\r\n     */\r\n    const fetchData = async () => {\r\n        const leagues = await leagueService.getAllLeagues();\r\n        setLeagues(leagues)\r\n\r\n        const teams = await teamService.getAllTeams();\r\n        setTeams(teams)\r\n\r\n        let matches = await matchService.getAllMatches();\r\n        setMatches(matches)\r\n    }\r\n\r\n    /**\r\n     * This function will recieve a league and will \"lock it\", it will take in\r\n     * all the teams that were sent and by using looping will generate matches and store\r\n     * to the database\r\n     * @param {*} league - The league for which matches will be created\r\n     */\r\n    const lockLeague = async (league) => {\r\n        //Temporary team array \r\n        let teamArray = []\r\n\r\n        //Convert the league to json\r\n        let json = JSON.stringify({\r\n            \"_id\": league._id,\r\n            \"leagueName\": league.leagueName,\r\n            \"isFinished\": league.isFinished,\r\n            \"isLocked\": \"true\",\r\n            \"teamsId\": league.teamsId\r\n        })\r\n\r\n        //edit the league to have isLocked to true\r\n        let status = leagueService.createLeague(json)\r\n\r\n        //Loop through the league to grab the IDs\r\n        for (let i = 0; i < league?.teamsId?.length; i++) {\r\n            //Convert the IDs to Json\r\n            let json = JSON.stringify({\r\n                \"_id\": league?.teamsId[i]\r\n            })\r\n            //Grab the team by using the service \r\n            let team = await teamService?.getTeam(json)\r\n\r\n            //push the team to the team array\r\n            teamArray?.push(team)\r\n        }\r\n\r\n        //save the teams to the global array\r\n        setTeams(teamArray)\r\n\r\n        //Create the matches by looping through all the teams\r\n        for (let i = 0; i < teamArray.length; i++) {\r\n            //Set the incrimenter to i + 1 so that no duplicate matches are created\r\n            for (let j = i + 1; j < teamArray.length; j++) {\r\n                //Convert the information to JSON\r\n                let json = JSON.stringify({\r\n                    \"league\": league,\r\n                    \"firstTeam\": teamArray[i],\r\n                    \"secondTeam\": teamArray[j],\r\n                    \"winnerTeam\": null,\r\n                    \"gamePriority\": [i].toString\r\n                })\r\n                //With the JSON information create a match object and store to the database\r\n                await matchService.createMatch(json);\r\n            }\r\n        }\r\n\r\n        //If the status is not empty refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //else display the error \r\n            alert(\"Failed to lock League!\")\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This function will take in a league variable\r\n     * and set that league to finish so that a winner can be displayed\r\n     * @param {*} league \r\n     */\r\n    const finishLeague = async (league) => {\r\n\r\n        //Convert the league information to json by editing the isFinished and locking the league\r\n        let json = JSON.stringify({\r\n            \"_id\": league._id,\r\n            \"leagueName\": league.leagueName,\r\n            \"isFinished\": \"true\",\r\n            \"isLocked\": \"true\",\r\n            \"teamsId\": league.teamsId\r\n        })\r\n\r\n        //Save the league to the database\r\n        let status = leagueService.createLeague(json)\r\n\r\n        //If save is succesful refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //Else display error to the user\r\n            alert(\"Failed to unlock League!\")\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This function will take in a league variable and then delete it\r\n     * by using the league service\r\n     * @param {*} league - League that has to be deleted\r\n     */\r\n    const deleteLeague = async (league) => {\r\n\r\n        //Convert the ID of the delete league to JSON\r\n        let json = JSON.stringify({\r\n            \"_id\": league._id,\r\n        })\r\n\r\n        //Delete all the Matches related to this league by looping through \r\n        for (let i = 0; i < matches.length; i++){\r\n            //Convert the IDs of the matches to JSON\r\n            let jsonDelete = JSON.stringify({\r\n                \"_id\" : matches[i]._id\r\n            });\r\n            \r\n            //Use Service to delete the match\r\n            if(matches[i].league._id === league._id) { \r\n                await matchService.deleteMatch(jsonDelete)\r\n            }\r\n               \r\n        }\r\n\r\n        //once matches are deleted delete the league\r\n        let status = leagueService.deleteLeague(json)\r\n\r\n        //If successful refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //Else display error message\r\n            alert(\"Failed to delete League!\")\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This function will unlock the league for more teams to join\r\n     * it will delete the matches so that new ones will be made\r\n     * @param {} league - League that will be unlocked\r\n     */\r\n    const unlockLeague = async (league) => {\r\n\r\n        //Convert the league information to json and set the isLocked to false\r\n        let json = JSON.stringify({\r\n            \"_id\": league._id,\r\n            \"leagueName\": league.leagueName,\r\n            \"isFinished\": league.isFinished,\r\n            \"isLocked\": \"false\",\r\n            \"teamsId\": league.teamsId\r\n        })\r\n\r\n        //Save the changes to the database\r\n        let status = leagueService.createLeague(json)\r\n\r\n        //Delete all the Matches related to this league by looping through \r\n        for (let i = 0; i < matches.length; i++){\r\n            //Convert the IDs of the matches to JSON\r\n            let jsonDelete = JSON.stringify({\r\n                \"_id\" : matches[i]._id\r\n            });\r\n            //Use Service to delete the match\r\n            if(matches[i].league._id === league._id) { \r\n                await matchService.deleteMatch(jsonDelete)\r\n            }\r\n        }\r\n\r\n        //If successful refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //Else display error message\r\n            alert(\"Failed to unlock League!\")\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This function will take in the winning team, losing team and match\r\n     * it will increment the wins and losses for the respective team as well as\r\n     * store the winning team in the match object\r\n     * \r\n     * @param {*} winningTeam - Winning Team\r\n     * @param {*} losingTeam  - Losing Team\r\n     * @param {*} match - Match that was played\r\n     */\r\n    const setWinner = async (winningTeam, losingTeam, match) => {\r\n\r\n        //Create temp variables for win and loss\r\n        let tempWin;\r\n        let tempLose;\r\n\r\n        //loop through the teams\r\n        for (let i = 0; i < teams.length; i++){\r\n            //Store the winning team in temp win\r\n            if (teams[i]._id === winningTeam._id){\r\n                tempWin = teams[i]\r\n            }\r\n            //Store the losing team in temp lose\r\n            if (teams[i]._id === losingTeam._id){\r\n                tempLose = teams[i]\r\n            }\r\n        }\r\n\r\n        //create a string variable to store the current wins\r\n        let stringWin = tempWin.teamWins;\r\n        //Conver to integer and and add the win \r\n        let num = Number.parseInt(stringWin) + 1;\r\n\r\n        //Convert all the data to JSON and edit the team wins \r\n        let json = JSON.stringify({\r\n            \"_id\" : winningTeam._id,\r\n            \"clubTag\": winningTeam.clubTag,\r\n            \"ownerID\": winningTeam.ownerID,\r\n            \"teamLosses\": tempWin.teamLosses,\r\n            \"teamWins\": num,\r\n            \"teamName\": winningTeam.teamName\r\n        });\r\n\r\n        //Use the team service to edit the team to the database\r\n        let status = await teamService.createTeam(json)\r\n\r\n        //create a string variable to store the current losses\r\n        let stringLoss = tempLose.teamLosses;\r\n        //Conver to integer and and add the loss\r\n        let numLoss = Number.parseInt(stringLoss) + 1;\r\n\r\n        //Convert all the data to JSON and edit the team losses\r\n        let jsonLoss = JSON.stringify({\r\n            \"_id\" : losingTeam._id,\r\n            \"clubTag\": losingTeam.clubTag,\r\n            \"ownerID\": losingTeam.ownerID,\r\n            \"teamLosses\": numLoss,\r\n            \"teamWins\": tempLose.teamWins,\r\n            \"teamName\": losingTeam.teamName\r\n        });\r\n\r\n        //Use the team service to edit the team to the database\r\n        let statusLoss = await teamService.createTeam(jsonLoss)\r\n\r\n        //Convert the match information to json and edit the winning team\r\n        let jsonMatch = JSON.stringify({\r\n            \"_id\" : match._id,\r\n            \"league\": match.league,\r\n            \"firstTeam\": match.firstTeam,\r\n            \"secondTeam\": match.secondTeam,\r\n            \"winnerTeam\": winningTeam,\r\n            \"gamePriority\": match.gamePriority\r\n        })\r\n\r\n        //Save the match to the database by using the service\r\n        await matchService.createMatch(jsonMatch);\r\n\r\n        //if there are no errors refresh the page\r\n        if (statusLoss !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //else display error\r\n            alert(\"Failed to set the winner!\")\r\n        }\r\n\r\n    };\r\n\r\n    //Method that will render the information for the page\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            { leagues[0] ? (\r\n                <div>\r\n                    <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                        View Leagues Below in Admin Mode!\r\n                    </Typography>\r\n                    <Grid container>\r\n                        <Grid xs={2}></Grid>\r\n                        <Grid className={classes.card}>\r\n                            <Grid container spacing={2} direction='row'>\r\n                                {leagues?.map((league) =>\r\n                                    <Grid item key={league._id} >\r\n                                        <Card className={classes.cardContent}>\r\n                                            <CardContent >\r\n                                                <Typography className={classes.pos} variant=\"h5\">\r\n                                                    League Name: {league.leagueName}\r\n                                                </Typography>\r\n                                            </CardContent>\r\n                                            <CardActions>\r\n                                                <div>\r\n                                                    {league.isLocked ? (\r\n                                                        <Button onClick={() => unlockLeague(league)} variant=\"contained\" color=\"primary\" size=\"small\">Unlock League</Button>\r\n                                                    ) : (\r\n                                                        <Button onClick={() => lockLeague(league)} variant=\"contained\" color=\"primary\" size=\"small\">Lock League</Button>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div>\r\n                                                    {league.isFinished ? (\r\n                                                        <Button onClick={() => deleteLeague(league)} variant=\"contained\" color=\"primary\" size=\"small\">Delete League</Button>\r\n                                                    ) : (\r\n                                                        <Button onClick={() => finishLeague(league)} variant=\"contained\" color=\"primary\" size=\"small\">Finish League</Button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </CardActions>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                            These are all the matches below!\r\n                        </Typography>\r\n                        <Grid container>\r\n                            <Grid xs={2}></Grid>\r\n                            <Grid className={classes.card}>\r\n                                <Grid container spacing={2} direction='row'>\r\n                                    {matches?.map((match) =>\r\n                                        <Grid item key={match?._id} >\r\n                                            <Card className={classes.cardContent}>\r\n                                                <CardContent >\r\n                                                    <Typography className={classes.pos} variant=\"h5\">\r\n                                                        {match?.firstTeam.teamName} vs {match?.secondTeam.teamName}\r\n                                                    </Typography>\r\n                                                </CardContent>\r\n                                                <CardActions>\r\n                                                    <div>\r\n                                                    {match?.winnerTeam ? (\r\n                                                        <Button variant=\"contained\" color=\"primary\" size=\"small\">{match?.winnerTeam.teamName} Won</Button>\r\n                                                    ) : (\r\n                                                        <div>\r\n                                                            <Button onClick={() => setWinner(match.firstTeam, match.secondTeam, match)} variant=\"contained\" color=\"primary\" size=\"small\">{match.firstTeam.teamName} Wins</Button>\r\n                                                            <Button onClick={() => setWinner(match.secondTeam, match.firstTeam, match)} variant=\"contained\" color=\"primary\" size=\"small\">{match.secondTeam.teamName} Wins</Button>\r\n                                                        </div>\r\n                                                    )}\r\n                                                    </div>\r\n                                                    \r\n                                                </CardActions>\r\n                                            </Card>\r\n                                        </Grid>\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    <Button href=\"/CreateLeague\" size=\"large\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                        Create League\r\n                </Button>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\LeagueService.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\components\\LeagueForm.js",["125"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 4.0\r\n *  Sprint 4: 04/04/2021\r\n *\r\n * \r\n * This is the form class for League where the admin uses to create the league.\r\n */\r\n\r\n\r\n/**\r\n * All the imports required for this file\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport leagueService from './../service/LeagueService';\r\n\r\n//Styles needed for the page\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n/**\r\n * This is the function that initializes the page\r\n * @param {*} props - Variables that come from the page that calls this component\r\n * @returns - HTML Page\r\n */\r\nexport default function Component(props) {\r\n\r\n    //Initialize variables that will be used in this page\r\n    const classes = useStyles();\r\n    const [leagues, setLeagues] = useState([]);\r\n    const [leagueName, setLeagueName] = useState();\r\n\r\n    //On change constants to re-render the changes\r\n    const onChangeLeagueName = (event) => {\r\n        setLeagueName(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * fetchData() - Async call that will grab all the necessary data for this page\r\n     */\r\n    const fetchData = async () => {\r\n        //Create a constant called leagues where the leagues will be stored\r\n        //Call the leagueService and get all leagues\r\n        const leagues = await leagueService.getAllLeagues();\r\n        //set the leages to the global constant\r\n        setLeagues(leagues)\r\n    }\r\n\r\n    /**\r\n     * This function will create a league with the prop variables sent to it\r\n     * @param {*} event - Event that will fire rendering \r\n     */\r\n    const handleSubmit = async (event) => {\r\n        //Prevent event re-rendering\r\n        event.preventDefault();\r\n\r\n        //Put all the league variables in json format\r\n        let json = JSON.stringify({\r\n            \"leagueName\" : leagueName,\r\n            \"isLocked\" : \"false\",\r\n            \"isFinished\" : \"false\",\r\n            \"teamsId\" : []\r\n        })\r\n\r\n        //Call the leagueService to override/create in the database\r\n        //NOTE - mongodb save upserts data no need for edit\r\n        let status = leagueService.createLeague(json);\r\n\r\n        //if there is a result refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //Else give error to user\r\n            alert(\"Failed to Create League\")\r\n        }\r\n    }\r\n\r\n    //Call use effect to render the data\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Typography align=\"center\" variant=\"h4\" style={{ marginTop: 40 }}>\r\n                Create a League!\r\n                        <br></br>\r\n            </Typography>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <ValidatorForm onSubmit={handleSubmit} onError={errors => console.log(errors)}>\r\n                        {/* LeagueName Field */}\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"leagueName\"\r\n                            label=\"League Name\"\r\n                            name=\"leagueName\"\r\n                            autoComplete=\"leagueName\"\r\n                            validators={['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{4,32}$']}\r\n                            errorMessages={['This field is required', 'Can only contain letters and numbers', 'Must be 4 to 32 characters']}\r\n                            onChange={onChangeLeagueName}\r\n                            value={leagueName}\r\n                            autoFocus\r\n                        />\r\n                        <TextField />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Create League\r\n                                </Button>\r\n                    </ValidatorForm>\r\n\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\CreateLeague.js",[],"C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\ViewLeague.js",["126"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This will allow the user to make a league view \r\n */\r\n\r\n//Import all the necessary components for the page \r\nimport React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport leagueService from './../service/LeagueService';\r\n\r\n//Styles needed for the page\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n/**\r\n * The class will be a form with league name and data validation\r\n * @param {*} props \r\n * @returns \r\n */\r\nexport default function Component(props) {\r\n\r\n    //state variables necessary for the page\r\n    const classes = useStyles();\r\n    const [leagues, setLeagues] = useState([]);\r\n    const [leagueName, setLeagueName] = useState();\r\n\r\n    //on change function to notice when the user is rendering\r\n    const onChangeLeagueName = (event) => {\r\n        setLeagueName(event.target.value);\r\n    }\r\n\r\n    //Fetch data will grab all the leagues and store them to the state variable\r\n    const fetchData = async () => {\r\n        const leagues = await leagueService.getAllLeagues();\r\n        setLeagues(leagues)\r\n    }\r\n\r\n    /**\r\n     * Handle submit function that will render after the admin creates a league\r\n     */\r\n    const handleSubmit = async (event) => {\r\n        //stop default rendering from event\r\n        event.preventDefault();\r\n\r\n        //convert the league information to json with the changes\r\n        let json = JSON.stringify({\r\n            \"_id\" : props.league._id,\r\n            \"leagueName\" : leagueName,\r\n            \"isLocked\" : props.league.isLocked,\r\n            \"matches\" : props.league.matches\r\n        })\r\n\r\n        //run the service command to create the league\r\n        let status = leagueService.createLeague(json);\r\n\r\n        //if sucessful refresh the page\r\n        if (status !== \"\") {\r\n            window.location.reload();\r\n        } else {\r\n            //else notify the user of the error\r\n            alert(\"Failed to Create League\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method will call the asynchronous call in order for the page to render after\r\n     * the data is recieved fromt the API Call\r\n     */\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Typography align=\"center\" variant=\"h4\" style={{ marginTop: 40 }}>\r\n                Create a League!\r\n                        <br></br>\r\n            </Typography>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <ValidatorForm onSubmit={handleSubmit} onError={errors => console.log(errors)}>\r\n                        {/* LeagueName Field */}\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"leagueName\"\r\n                            label=\"League Name\"\r\n                            name=\"leagueName\"\r\n                            autoComplete=\"leagueName\"\r\n                            validators={['required', 'matchRegexp:^[a-zA-Z0-9]+$', 'matchRegexp:^.{4,32}$']}\r\n                            errorMessages={['This field is required', 'Can only contain letters and numbers', 'Must be 4 to 32 characters']}\r\n                            onChange={onChangeLeagueName}\r\n                            value={props.viewLeague.leagueName}\r\n                            autoFocus\r\n                        />\r\n                        <TextField />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Edit League\r\n                        </Button>\r\n                    </ValidatorForm>\r\n\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\Matches.js",["127","128","129","130"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This Page will display the league that the user is in as well as the matches that are in the league\r\n */\r\n\r\n//Import all the necessary components for the page \r\nimport Cookies from 'universal-cookie';\r\nimport service from './../service/UserService';\r\nimport teamService from './../service/TeamService';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport TeamInfoForm from './TeamInfoForm';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport leagueService from './../service/LeagueService';\r\nimport LeagueDisplay from \"./LeagueDisplay\";\r\n\r\n//Define the CSS styles that are going to be used and store in use styles\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n    },\r\n    card: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50\r\n    },\r\n    cardContent: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50,\r\n        backgroundColor: \"#3f50b5\"\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n        marginTop: 10,\r\n        color: \"#FFFFFF\"\r\n    },\r\n    button: {\r\n        size: \"large\",\r\n        float: 'right',\r\n        padding: 20,\r\n        marginRight: 100,\r\n        marginTop: 500,\r\n        marginBottom: 100,\r\n        variant: \"contained\",\r\n        color: \"primary\",\r\n        justifycontent: 'center'\r\n    },\r\n    header: {\r\n        marginTop: 50\r\n    }\r\n});\r\n\r\n//Cookies (session) - The session used to grab the user and show their information\r\nconst cookies = new Cookies();\r\nconst _id = cookies.get('Id');\r\n\r\n/**\r\n * This is the function that will return the page \r\n * as well as take in props that will have logic \r\n * coded in to display the league and teams\r\n * @param {*} props - Variables\r\n * @returns - HTML Page\r\n */\r\nexport default function Component(props) {\r\n\r\n    //Decleare all the constants necessary for the page\r\n    const [data, setData] = useState();\r\n    const [userTeam, setUserTeam] = useState();\r\n    const [leagues, setLeagues] = useState([]);\r\n    const [isLoading, setLoading] = useState();\r\n    const [teams, setTeams] = useState([]);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    //set up booleans that are going to be used to show different information \r\n    let inLeague = false;\r\n    let isOwner = false;\r\n\r\n    //variable to store the teams in the league\r\n    let teamLeague;\r\n\r\n    /**\r\n     * Fetch data will grab teams, matches as well as filter through the\r\n     * matches to only assign th e ones respecitve to the user\r\n     */\r\n    const fetchData = async () => {\r\n\r\n        //Convert the user id from session to JSON \r\n        let json = JSON.stringify({\r\n            \"_id\": _id,\r\n        });\r\n        try {\r\n            //set loading to true so that the data gets rendered\r\n            setLoading(true)\r\n\r\n            //get the user from the session id\r\n            const user = await service.getUser(json)\r\n\r\n            //store the user in the global user variable\r\n            setData(user)\r\n\r\n            //if the user team id is not empty\r\n            if (user.team_id !== \"\") {\r\n\r\n                //convert the users team id to json\r\n                let teamJson = JSON.stringify({\r\n                    \"_id\": user.team_id\r\n                })\r\n\r\n                //grab the team from the database\r\n                const team = await teamService.getTeam(teamJson)\r\n\r\n                //store it in a global variable\r\n                setUserTeam(team)\r\n            }\r\n\r\n            //use the league service to grab all the leagues in the database\r\n            const leagues = await leagueService.getAllLeagues()\r\n            //set the leagues to the league state variable\r\n            setLeagues(leagues)\r\n\r\n        } catch (e) {\r\n            //if there are errors console log \r\n            console.log(e)\r\n        } finally {\r\n            //set loading to false so that the page will render\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    //loop the leagues\r\n    for (let i = 0; i < leagues.length; i++) {\r\n        //loop through the team IDs of the league\r\n        for (let j = 0; j < leagues[i]?.teamsId.length; j++) {\r\n            //if the user team ID is equal to the leagues team id\r\n            if (userTeam._id === leagues[i]?.teamsId[j]) {\r\n                //set the in league to true\r\n                inLeague = true;\r\n                //store the league to the users team league\r\n                teamLeague = leagues[i];\r\n                //break\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //if the id of the user is equal to the team owner id\r\n    if (data?._id === userTeam?.ownerID) {\r\n        //set is owner to true\r\n        isOwner = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will let a team join a league by taking in\r\n     * the league that the owner chooses to join \r\n     * @param {} league \r\n     */\r\n    const joinLeague = async (league) => {\r\n        //set teams array as the teams id array from the league that is sent in\r\n        let teamsArray = league.teamsId\r\n\r\n        //push the current users team ID to the teams array\r\n        teamsArray.push(userTeam._id)\r\n\r\n        //convert the league informaton to JSON and replace the teamsId variable to the \r\n        //new teams ID that we pushed the team in\r\n        let json = JSON.stringify({\r\n            \"_id\": league._id,\r\n            \"leagueName\": league.leagueName,\r\n            \"isLocked\": league.isLocked,\r\n            \"isFinished\" : league.isFinished,\r\n            \"teamsId\": teamsArray\r\n        })\r\n\r\n        //if the league is locked the action will not be able to perform\r\n        if (league.isLocked) {\r\n            //alert the user\r\n            alert(\"Cannot Join League because it has already started!\")\r\n        } else {\r\n            //else push the new league to the database\r\n            let status = await leagueService.createLeague(json)\r\n\r\n            //if the status is okay refresh the page\r\n            if (status !== \"\") {\r\n                window.location.reload();\r\n            } else {\r\n                //else display the error to the user\r\n                alert(\"Failed to join League!\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * This method will call the asynchronous call in order for the page to render after\r\n     * the data is recieved fromt the API Call\r\n     */\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {data?.team_id !== \"\" ? (\r\n                <div>\r\n                    {isOwner ? (\r\n                        <div>\r\n                            {inLeague ? (\r\n                                <div>\r\n                                    <LeagueDisplay\r\n                                        user={data}\r\n                                        team={userTeam}\r\n                                        league={teamLeague}\r\n                                        inLeague={inLeague}\r\n                                        isOwner={isOwner}\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                                        View Leagues below and Join!\r\n                                    </Typography>\r\n                                    <Grid container>\r\n                                        <Grid xs={2}></Grid>\r\n                                        <Grid className={classes.card}>\r\n                                            <Grid container spacing={2} direction='row'>\r\n                                                {leagues?.map((league) =>\r\n                                                    <Grid item key={league._id} >\r\n                                                        <Card className={classes.cardContent}>\r\n                                                            <CardContent >\r\n                                                                <Typography className={classes.pos} variant=\"h5\">\r\n                                                                    League Name: {league.leagueName}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                            <CardActions>\r\n                                                                <Button onClick={() => joinLeague(league)} variant=\"contained\" color=\"primary\" size=\"small\">Join League</Button>\r\n                                                            </CardActions>\r\n                                                        </Card>\r\n                                                    </Grid>\r\n                                                )}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            {inLeague ? (\r\n                                <div>\r\n                                    <LeagueDisplay\r\n                                        user={data}\r\n                                        team={userTeam}\r\n                                        league={teamLeague}\r\n                                        inLeague={inLeague}\r\n                                        isOwner={isOwner}\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                                        Your team has not joined a team yet!<br></br>\r\n                                        Available leagues are below if you want to tell your team leader about one!\r\n                                    </Typography>\r\n                                    <Grid container>\r\n                                        <Grid xs={2}></Grid>\r\n                                        <Grid className={classes.card}>\r\n                                            <Grid container spacing={2} direction='row'>\r\n                                                {leagues?.map((league) =>\r\n                                                    <Grid item key={league._id} >\r\n                                                        <Card className={classes.cardContent}>\r\n                                                            <CardContent >\r\n                                                                <Typography className={classes.pos} variant=\"h5\">\r\n                                                                    League Name: {league.leagueName}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                        </Card>\r\n                                                    </Grid>\r\n                                                )}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    {history.push(\"/TeamInfo\")}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\pages\\LeagueDisplay.js",["131","132","133","134","135","136","137","138","139","140"],"/*  Hermes Mimini\r\n *  CST-452: Professor Mark Reha\r\n *  Version 1.0\r\n *  Sprint 2: 02/07/2021\r\n * \r\n * This Page will display the league as well as hold basic functionality for the League Interaction\r\n * with the user\r\n */\r\n\r\n//Import all the necessary components for the page \r\nimport Cookies from 'universal-cookie';\r\nimport service from './../service/UserService';\r\nimport teamService from './../service/TeamService';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport TeamInfoForm from './TeamInfoForm';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport leagueService from './../service/LeagueService';\r\nimport HomePage from './HomePage';\r\nimport UserService from './../service/UserService';\r\nimport MatchService from '../service/MatchService';\r\n\r\n//Define the CSS styles that are going to be used and store in use styles\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n    },\r\n    card: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50\r\n    },\r\n    cardContent: {\r\n        minWidth: 275,\r\n        align: 'center',\r\n        marginTop: 50,\r\n        backgroundColor: \"#3f50b5\"\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n        marginTop: 10,\r\n        color: \"#FFFFFF\"\r\n    },\r\n    button: {\r\n        size: \"large\",\r\n        float: 'right',\r\n        padding: 20,\r\n        marginRight: 100,\r\n        marginTop: 500,\r\n        marginBottom: 100,\r\n        variant: \"contained\",\r\n        color: \"primary\",\r\n        justifycontent: 'center'\r\n    },\r\n    header: {\r\n        marginTop: 50\r\n    }\r\n});\r\n\r\n//Cookies (session) - The session used to grab the user and show their information\r\nconst cookies = new Cookies();\r\nconst _id = cookies.get('Id');\r\n\r\n/**\r\n * This is the function that will return the page \r\n * as well as take in props that will have logic \r\n * coded in to display the league\r\n * @param {*} props - Variables\r\n * @returns - HTML Page\r\n */\r\nexport default function Component(props) {\r\n\r\n    //Decleare all the constants necessary for the page\r\n    const [isLoading, setLoading] = useState();\r\n    const [teams, setTeams] = useState([]);\r\n    const [teamMatches, setTeamMatches] = useState([]);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    //set up booleans that are going to be used to show different information \r\n    let inLeague = false;\r\n    let isOwner = false;\r\n\r\n    /**\r\n     * Fetch data will grab teams, matches as well as filter through the\r\n     * matches to only assign th e ones respecitve to the user\r\n     */\r\n    const fetchData = async () => {\r\n        //grab the teams\r\n        let teams = await teamService.getAllTeams();\r\n        //grab the matches\r\n        let matches = await MatchService.getAllMatches();\r\n\r\n        //set up a temporary array to store the teams\r\n        let teamArray = [];\r\n\r\n        //set up a temporary array to filter out the matches that correspond to the user\r\n        const matchesArray = matches.filter((match) => {\r\n            if (match?.firstTeam._id === props?.user.team_id || match?.secondTeam._id === props?.user.team_id) {\r\n                return match;\r\n            }\r\n        })\r\n\r\n        //set the matches to the global array\r\n        setTeamMatches(matchesArray)\r\n\r\n        //filter through the teams and store in the temporary array only\r\n        //the teams that correspond to the users league\r\n        for (let i = 0; i < props.league.teamsId.length; i++) {\r\n            for (let j = 0; j < teams.length; j++) {\r\n                if (teams[j]._id === props.league.teamsId[i]) {\r\n                    teamArray.push(teams[j])\r\n                }\r\n            }\r\n        }\r\n\r\n        //set the teams to the global variable\r\n        setTeams(teamArray)\r\n    }\r\n\r\n    \r\n    /**\r\n     * This function will display the team leader to the user \r\n     * @param {*} team - The team that the leader wants to be seen\r\n     */\r\n    const showTeamLeader = async (team) => {\r\n\r\n        //convert the owner ID of the team to JSON\r\n        let json = JSON.stringify({\r\n            \"_id\": team.ownerID\r\n        })\r\n\r\n        //Grab the user from the database by using the user service\r\n        let status = await service.getUser(json)\r\n\r\n        //if it works display to the user the team leader information\r\n        if (status !== \"\") {\r\n            alert(\"Team Leader is Firstname: \" + status.firstName + \" ,and Username: \" + status.username)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will remove a team from the leage as well\r\n     * as fix the connections that are left behind with that event\r\n     * @param {} league - The leage that is going to be left \r\n     */\r\n    const leaveLeague = async (league) => {\r\n        //set the teams array as the props array that corresponds to the teamsId array\r\n        let teamsArray = props.league.teamsId\r\n\r\n        //make a new array that is going to hold the new teamsId\r\n        let newTeamsArray = [];\r\n\r\n        //Loop through the teamsArray\r\n        for (let i = 0; i < teamsArray.length; i++) {\r\n            //if the teamsArray does not equal the current user team id\r\n            if (teamsArray[i] !== props.user.team_id) {\r\n                //push it to the new array\r\n                newTeamsArray?.push(teamsArray[i])\r\n            }\r\n        }\r\n\r\n        //convert the league information to JSON with the new teams array\r\n        let json = JSON.stringify({\r\n            \"_id\": props.league._id,\r\n            \"leagueName\": props.league.leagueName,\r\n            \"isFinished\": props.league.isFinished,\r\n            \"isLocked\": props.league.isLocked,\r\n            \"teamsId\": newTeamsArray\r\n        })\r\n\r\n        //if the league is locked the team is not allowed to leave\r\n        if (props.league.isLocked) {\r\n            alert(\"Cannot Leave League, the league has started!\")\r\n        } else {\r\n            //edit the league with the new array and reload the page\r\n            let status = await leagueService.createLeague(json)\r\n            if (status !== \"\") {\r\n                window.location.reload();\r\n            } else {\r\n                alert(\"Failed to join League!\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n * This method will call the asynchronous call in order for the page to render after\r\n * the data is recieved fromt the API Call\r\n */\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {props.user?.team_id !== \"\" ? (\r\n                <div>\r\n                    <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                        You are part of the {props.league.leagueName} League!<br></br>\r\n                        Opponent Teams are listed below\r\n                    </Typography>\r\n                    <Grid container>\r\n                        <Grid xs={2}></Grid>\r\n                        <Grid className={classes.card}>\r\n                            <Grid container spacing={2} direction='row'>\r\n                                {teams?.map((team) =>\r\n                                    <Grid item key={team?._id} >\r\n                                        <Card className={classes.cardContent}>\r\n                                            <CardContent >\r\n                                                <Typography className={classes.pos} variant=\"h5\">\r\n                                                    Team Name: {team?.teamName}\r\n                                                </Typography>\r\n                                                <Typography className={classes.pos}>\r\n                                                    Clubtag: {team?.clubTag}\r\n                                                </Typography>\r\n                                                <Typography className={classes.pos} variant=\"body2\">\r\n                                                    Wins: {team?.teamWins}, Losses: {team?.teamLosses}\r\n                                                </Typography>\r\n                                            </CardContent>\r\n                                            <CardActions>\r\n                                                <Button onClick={() => showTeamLeader(team)} variant=\"contained\" color=\"primary\" size=\"small\">Show Team Leader</Button>\r\n                                            </CardActions>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {props.league.isLocked ? (\r\n                        <div>\r\n                            <Typography className={classes.header} align=\"center\" variant=\"h4\">\r\n                                Your teams matches are below!\r\n                            </Typography>\r\n                            <Grid container>\r\n                                <Grid xs={2}></Grid>\r\n                                <Grid className={classes.card}>\r\n                                    <Grid container spacing={2} direction='row'>\r\n                                        {teamMatches?.map((match) =>\r\n                                            <Grid item key={match?._id} >\r\n                                                <Card className={classes.cardContent}>\r\n                                                    <CardContent >\r\n                                                        <Typography className={classes.pos} variant=\"h5\">\r\n                                                            {match?.firstTeam.teamName} vs {match?.secondTeam.teamName}\r\n                                                        </Typography>\r\n                                                    </CardContent>\r\n                                                </Card>\r\n                                            </Grid>\r\n                                        )}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    ) : (<div></div>)}\r\n                    {props.user._id === props.team.ownerID ? (\r\n                        <div>\r\n                            <Button onClick={() => leaveLeague()} variant=\"contained\" color=\"primary\" size=\"small\" className={classes.button}>Leave League</Button>\r\n                        </div>\r\n                    ) : (<div></div>)}\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    {history.push(\"/TeamInfo\")}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\hmimi\\Desktop\\VSCodeProject\\genesisesports_v1.0\\src\\service\\MatchService.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":78,"column":6,"nodeType":"147","endLine":78,"endColumn":8,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":15,"column":8,"nodeType":"151","messageId":"152","endLine":15,"endColumn":21},{"ruleId":"141","replacedBy":"153"},{"ruleId":"143","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":209,"column":47,"nodeType":"157","messageId":"158","endLine":209,"endColumn":49},{"ruleId":"155","severity":1,"message":"156","line":318,"column":53,"nodeType":"157","messageId":"158","endLine":318,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":325,"column":47,"nodeType":"157","messageId":"158","endLine":325,"endColumn":49},{"ruleId":"145","severity":1,"message":"146","line":351,"column":8,"nodeType":"147","endLine":351,"endColumn":10,"suggestions":"159"},{"ruleId":"145","severity":1,"message":"146","line":145,"column":8,"nodeType":"147","endLine":145,"endColumn":10,"suggestions":"160"},{"ruleId":"149","severity":1,"message":"161","line":14,"column":8,"nodeType":"151","messageId":"152","endLine":14,"endColumn":18},{"ruleId":"149","severity":1,"message":"162","line":15,"column":8,"nodeType":"151","messageId":"152","endLine":15,"endColumn":18},{"ruleId":"149","severity":1,"message":"163","line":82,"column":11,"nodeType":"151","messageId":"152","endLine":82,"endColumn":18},{"ruleId":"149","severity":1,"message":"164","line":84,"column":12,"nodeType":"151","messageId":"152","endLine":84,"endColumn":22},{"ruleId":"149","severity":1,"message":"165","line":84,"column":24,"nodeType":"151","messageId":"152","endLine":84,"endColumn":37},{"ruleId":"149","severity":1,"message":"166","line":319,"column":13,"nodeType":"151","messageId":"152","endLine":319,"endColumn":19},{"ruleId":"149","severity":1,"message":"167","line":54,"column":12,"nodeType":"151","messageId":"152","endLine":54,"endColumn":19},{"ruleId":"149","severity":1,"message":"167","line":50,"column":12,"nodeType":"151","messageId":"152","endLine":50,"endColumn":19},{"ruleId":"149","severity":1,"message":"168","line":21,"column":8,"nodeType":"151","messageId":"152","endLine":21,"endColumn":20},{"ruleId":"149","severity":1,"message":"169","line":89,"column":12,"nodeType":"151","messageId":"152","endLine":89,"endColumn":21},{"ruleId":"149","severity":1,"message":"170","line":90,"column":12,"nodeType":"151","messageId":"152","endLine":90,"endColumn":17},{"ruleId":"149","severity":1,"message":"171","line":90,"column":19,"nodeType":"151","messageId":"152","endLine":90,"endColumn":27},{"ruleId":"149","severity":1,"message":"168","line":22,"column":8,"nodeType":"151","messageId":"152","endLine":22,"endColumn":20},{"ruleId":"149","severity":1,"message":"172","line":25,"column":8,"nodeType":"151","messageId":"152","endLine":25,"endColumn":16},{"ruleId":"149","severity":1,"message":"173","line":26,"column":8,"nodeType":"151","messageId":"152","endLine":26,"endColumn":19},{"ruleId":"149","severity":1,"message":"174","line":77,"column":7,"nodeType":"151","messageId":"152","endLine":77,"endColumn":10},{"ruleId":"149","severity":1,"message":"169","line":89,"column":12,"nodeType":"151","messageId":"152","endLine":89,"endColumn":21},{"ruleId":"149","severity":1,"message":"175","line":89,"column":23,"nodeType":"151","messageId":"152","endLine":89,"endColumn":33},{"ruleId":"149","severity":1,"message":"176","line":96,"column":9,"nodeType":"151","messageId":"152","endLine":96,"endColumn":17},{"ruleId":"149","severity":1,"message":"177","line":97,"column":9,"nodeType":"151","messageId":"152","endLine":97,"endColumn":16},{"ruleId":"155","severity":1,"message":"156","line":113,"column":53,"nodeType":"157","messageId":"158","endLine":113,"endColumn":55},{"ruleId":"145","severity":1,"message":"146","line":208,"column":8,"nodeType":"147","endLine":208,"endColumn":10,"suggestions":"178"},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["181"],"no-unused-vars","'LeagueDisplay' is defined but never used.","Identifier","unusedVar",["179"],["180"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["182"],["183"],"'LeagueForm' is defined but never used.","'ViewLeague' is defined but never used.","'history' is assigned a value but never used.","'viewLeague' is assigned a value but never used.","'setViewLeague' is assigned a value but never used.","'status' is assigned a value but never used.","'leagues' is assigned a value but never used.","'TeamInfoForm' is defined but never used.","'isLoading' is assigned a value but never used.","'teams' is assigned a value but never used.","'setTeams' is assigned a value but never used.","'HomePage' is defined but never used.","'UserService' is defined but never used.","'_id' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'inLeague' is assigned a value but never used.","'isOwner' is assigned a value but never used.",["184"],"no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},{"desc":"185","fix":"188"},{"desc":"185","fix":"189"},"Update the dependencies array to be: [fetchData]",{"range":"190","text":"191"},{"range":"192","text":"191"},{"range":"193","text":"191"},{"range":"194","text":"191"},[2035,2037],"[fetchData]",[11107,11109],[4700,4702],[6881,6883]]